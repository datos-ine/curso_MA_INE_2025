[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Portada",
    "section": "",
    "text": "Artwork por @allison_horst\n\nLes damos la bienvenida al curso de “Introducción a la Revisión Sistemática con Meta-análisis”. Antes de profundizar en los temas específicos, recomendamos a quienes lo requieran repasar el material introductorio sobre R e inferencia estadística. ya que les proporcionará una base sólida para aprovechar al máximo el curso. ¡Esperamos que disfruten y enriquezcan sus conocimientos!\n\n\n\n Volver arribaReutilizaciónCC BY-NC 4.0"
  },
  {
    "objectID": "extras/intro_inferencia.html",
    "href": "extras/intro_inferencia.html",
    "title": "Introducción a la inferencia estadística",
    "section": "",
    "text": "Artwork por @allison_horst",
    "crumbs": [
      "Material suplementario",
      "Introducción a la inferencia estadística"
    ]
  },
  {
    "objectID": "extras/intro_inferencia.html#fundamentos",
    "href": "extras/intro_inferencia.html#fundamentos",
    "title": "Introducción a la inferencia estadística",
    "section": "Fundamentos",
    "text": "Fundamentos\nLa estadística inferencial es la rama de la estadística que permite extraer conclusiones sobre una población a partir de una muestra de datos. Este proceso se sustenta en dos procedimientos principales: la estimación y la prueba de hipótesis.\nLa población se define como el conjunto completo de individuos u observaciones de interés, mientras que la muestra es el subconjunto representativo de esa población, diseñado para reflejar sus características fundamentales.\nPara describir la población se utilizan parámetros, valores numéricos como la media poblacional \\((\\mu)\\), mientras que los datos muestrales se resumen con estadísticos, por ejemplo, la media muestral \\((\\bar{x})\\).",
    "crumbs": [
      "Material suplementario",
      "Introducción a la inferencia estadística"
    ]
  },
  {
    "objectID": "extras/intro_inferencia.html#estimación-de-parámetros",
    "href": "extras/intro_inferencia.html#estimación-de-parámetros",
    "title": "Introducción a la inferencia estadística",
    "section": "Estimación de parámetros",
    "text": "Estimación de parámetros\nLa estimación consiste en utilizar información muestral para inferir el valor de un parámetro poblacional. Existen dos tipos principales:\n\nEstimación puntual: proporciona un único valor estimado (por ejemplo, \\(\\bar{x}\\) como estimador de \\(\\mu\\)).\nEstimación por intervalo de confianza: proporciona un rango de valores plausibles para el parámetro, con un nivel de confianza determinado.\n\nIntervalos de confianza\nAunque los intervalos de confianza son procedimientos inferenciales, están estrechamente ligados a la estadística descriptiva. Un intervalo de confianza indica un rango de valores dentro del cual se espera que se ubique el verdadero valor del parámetro poblacional, con una cierta probabilidad conocida como nivel de confianza.\nLa forma general de un IC es:\n\\[ IC = estimador~puntual \\pm (coeficiente~de~confiabilidad) * (error~ estandar) \\]\nEstimador puntual\n\nPara la media poblacional (\\(\\mu\\)): se utiliza la media muestral \\(\\bar{x}\\).\nPara una proporción poblacional (\\(p\\)): se utiliza la proporción muestral \\(\\hat{p}\\).\nCoeficiente de confiabilidad\nCorresponde al valor asociado al nivel de confianza deseado (por ejemplo, 90%, 95%, 99%). Se denota como \\(1 - \\alpha\\), siendo \\(\\alpha\\) el nivel de significación (probabilidad de error tipo I). Por ejemplo, para un 95% de confianza, \\(\\alpha = 0.05\\) y el coeficiente es \\(Z_{1 - \\alpha/2} \\approx 1.96\\).\nError estándar (SE)\nRepresenta la variabilidad de la distribución muestral y depende del parámetro.\nPor ejemplo, para la media se calcula:\n\\[\nSE = \\frac{\\sigma}{\\sqrt{n}}\n\\]\nDonde \\(\\sigma\\) es la desviación estándar poblacional y \\(n\\) el tamaño de la muestra.\nMientras que para una proporción se calcula como:\n\\[\nSE = \\sqrt{\\frac{\\hat{p}(1 - \\hat{p})}{n}}\n\\]\nTeorema del límite central\nEl Teorema del Límite Central (TLC) establece que, para muestras suficientemente grandes, la distribución muestral de la media (\\(\\bar{x}\\)) es aproximadamente normal, con media \\(\\mu\\) y varianza \\(\\sigma^2/n\\). Esto permite utilizar la distribución normal estándar para calcular probabilidades e intervalos:\n\\[\nZ = \\frac{\\bar{x}-\\mu}{\\sigma}\n\\]\nDado esto, se sabe que en una distribución normal:\n\nAproximadamente el 68% de los valores se encuentran entre \\(\\mu \\pm \\sigma\\).\nAproximadamente el 95% entre \\(\\mu \\pm 2\\sigma\\).\nAproximadamente el 99% entre \\(\\mu \\pm 3\\sigma\\).\n\nEl siguiente gráfico ilustra lo explicado anteriormente:\n\n\n\n\n\n\n\n\nUn IC al 95% no significa que haya un 95% de probabilidad de que el parámetro esté dentro de un único intervalo calculado. Lo correcto es decir que, si repitiéramos muchas veces el procedimiento muestral, el 95% de los intervalos construidos de esa forma contendrían el verdadero valor del parámetro.\n¿Cómo se interpreta un IC?\nSi repitiéramos el muestreo muchas veces, tomando muestras del mismo tamaño y construyendo un IC en cada caso, aproximadamente el \\(100 * (1 − \\alpha)\\%\\) de esos intervalos contendrían el valor real del parámetro. Por ejemplo, un IC al 95% implica que, en el largo plazo, el 95% de los intervalos construidos con este método contendrán el valor verdadero.\nLa amplitud del IC está determinada por la precisión de la estimación, que se calcula como el producto entre el coeficiente de confiabilidad (vinculado al nivel de confianza) y el error estándar. La fórmula general para construir un intervalo de confianza es:\n\\[ IC = estimador~puntual \\pm (coeficiente~de~confiabilidad) * (error~ estandar) \\]\nEn el caso de la media:\n\nAumento del nivel de confianza: Si se incrementa el nivel de confianza (por ejemplo, del 95% al 99%), el coeficiente de confiabilidad aumenta (por ejemplo, de 1.96 a 2.58), lo que produce un intervalo más amplio.\n\nReducción del error estándar: Si se mantiene fijo el nivel de confianza, reducir la amplitud del IC requiere disminuir el error estándar. Para la media, este se calcula como:\n\\[ SE = \\frac{\\sigma}{\\sqrt{n}} \\]\ny considerando que \\(\\sigma\\) es constante, la única forma de disminuir el error estándar es aumentando el tamaño muestral (\\(n\\)).\n\n\nEl cálculo de los intervalos de confianza se basa en las distribuciones muestrales de los estimadores y en el error estándar correspondiente. Aunque las fórmulas pueden parecer complejas, los paquetes estadísticos (como R) permiten calcularlos de forma automática. Lo esencial es comprender de qué depende la amplitud del IC (nivel de confianza, error estándar y tamaño de la muestra) y cómo cada uno de estos factores influye en la precisión de la estimación.",
    "crumbs": [
      "Material suplementario",
      "Introducción a la inferencia estadística"
    ]
  },
  {
    "objectID": "extras/intro_inferencia.html#pruebas-de-hipótesis",
    "href": "extras/intro_inferencia.html#pruebas-de-hipótesis",
    "title": "Introducción a la inferencia estadística",
    "section": "Pruebas de Hipótesis",
    "text": "Pruebas de Hipótesis\nLas pruebas de hipótesis (también conocidas como tests o contrastes de hipótesis) permiten tomar decisiones sobre una población a partir de los datos obtenidos de una muestra.\nAntes de profundizar en los aspectos estadísticos, es importante distinguir entre dos tipos de hipótesis:\n\nHipótesis de investigación: representan la pregunta o problema que motiva el estudio.\nHipótesis estadística: es la formulación que puede ser evaluada mediante técnicas de estadística inferencial.\n\nEl contraste de hipótesis se basa en la comparación de dos hipótesis estadísticas:\n\nHipótesis nula (\\(H_0\\)): sostiene que no existen diferencias entre los grupos comparados (por ejemplo, \\(\\mu = \\mu_0\\)​); por lo tanto, cualquier diferencia observada se debe únicamente al azar.\nHipótesis alternativa (\\(H_1\\)): plantea que existen diferencias entre grupos (por ejemplo, \\(\\mu \\neq \\mu_0,~ \\mu &gt; \\mu_0~ ó~ \\mu &lt; \\mu_0\\)). Generalmente es la formulación matemática de nuestra hipótesis de investigación y es complementaria de \\(H_0\\). No se acepta ni se refuta de manera directa.\n\nEl método estadístico nos permite cuantificar la diferencia entre grupos bajo el supuesto de que, si repitiésemos el experimento infinitas veces y obtuviésemos todas las muestras posibles del mismo tamaño, las diferencias entre grupos “iguales” seguirían una distribución muestral teórica. A partir de esta distribución, se define un valor límite (por ejemplo, que abarca el 95% o el 99% de las diferencias esperadas).\n\nSi la diferencia observada excede ese límite, se considera demasiado grande para ser atribuida al azar y se rechaza la hipótesis nula (\\(H_0\\)).\nSi la diferencia cae dentro del rango esperado, no se rechaza \\(H_0\\), ya que podría deberse al azar. En estos casos, se concluye que los grupos “no son diferentes”, lo que no implica que “sean iguales”, ya que la variabilidad muestral impide demostrar una igualdad exacta.\n\nLos contrastes de hipótesis suelen realizarse suponiendo que se conoce a priori la distribución de la población y que se extrae una muestra aleatoria de la misma.\nEstadístico de prueba\nEs el valor calculado a partir de los datos muestrales que se utiliza para tomar la decisión respecto de \\(H_0\\). Cada situación tiene un estadístico adecuado cuya magnitud, al compararse con su distribución teórica permite determinar si las diferencias observadas son atribuibles al azar. Por ejemplo:\n\nPara variables categóricas se utiliza el estadístico chi-cuadrado (\\(\\chi^2\\)).\nPara variables numéricas, se emplean distribuciones como la normal (\\(Z\\)) o t de Student (\\(t\\)).\nNivel de significancia\nEl nivel de significación (\\(\\alpha\\)) representa la probabilidad de cometer un error tipo I, es decir, rechazar \\(H_0\\) cuando en realidad es verdadera. Se define antes del análisis (comúnmente 0,05 o 0,01) y determina el límite entre la región de no rechazo y la región crítica.\nRegión crítica\nSe denomina región crítica (o región de rechazo) al conjunto de valores del estadístico de prueba que llevan al rechazo de \\(H_0\\). Esta región se define según el nivel de significación (\\(\\alpha\\)), e incluye los valores extremos del estadístico que serían poco probables si \\(H_0\\) fuera cierta. En una representación gráfica, la región crítica se ubica en una o ambas colas de la distribución, dependiendo del tipo de prueba\n\n\n\n\n\n\n\n\nLa regla de decisión es la siguiente:\n\nSi el valor calculado del estadístico cae dentro de la región crítica, se rechaza \\(H_0\\) y se concluye que las diferencias observadas son estadísticamente significativas.\nSi el valor no cae en la región crítica, no se rechaza \\(H_0\\). En ese caso, las diferencias observadas pueden explicarse por el azar, y no se consideran estadísticamente significativas.\nValor crítico\nEl valor crítico o p-valor es la probabilidad de obtener un resultado igual o más extremo que el observado, bajo la suposición de que \\(H_0\\) es verdadera. Representa el menor nivel de \\(\\alpha\\) para el cual puede rechazarse \\(H_0\\).\nSi el valor p es muy pequeño, indica que el resultado observado sería poco probable si \\(H_0\\) fuera cierta, por lo tanto, se rechaza la hipótesis nula.\nLa regla práctica es:\n\nSi \\(p \\leq \\alpha\\), se rechaza \\(H_0\\).\nSi \\(p &gt; \\alpha\\), no se rechaza \\(H_0\\).\nTipos de contraste\nLos contrastes de hipótesis se clasifican según la forma de la hipótesis alternativa (\\(H_1\\)). Esta clasificación determina si la prueba es unilateral (de cola izquierda o derecha) o bilateral (de dos colas).\nTest de cola izquierda\nLa hipótesis alternativa plantea que la media del primer grupo es significativamente menor que la del segundo:\n\\[\nH_1: \\mu_1 &lt; \\mu_2\n\\]\nLa región crítica se encuentra en el extremo izquierdo de la distribución. Todo el área crítica tiene un tamaño \\(\\alpha\\) con un valor crítico de \\(-1,645\\).\n\n\n\n\n\n\n\n\nTest de cola derecha\nLa hipótesis alternativa establece que la media del primer grupo es significativamente mayor que la del segundo:\n\\[ H_1: \\mu_1 &gt; \\mu_2 \\]\nLa región crítica se concentra en el extremo derecho de la distribución y toda el área crítica tiene un tamaño \\(\\alpha\\) con un valor crítico de \\(1,645\\).\n\n\n\n\n\n\n\n\nPruebas bilaterales\nLa hipótesis alternativa afirma que existen diferencias entre los grupos, sin especificar la dirección:\n\\[\nH_1: \\mu_1 \\neq \\mu_2\n\\]\nLa región crítica se divide entre ambos extremos de la distribución, con valores críticos de \\(\\pm 1,96\\). El nivel de significación total (\\(\\alpha\\)) se reparte en partes iguales entre las dos colas (\\(\\alpha/2\\) en cada una), lo que implica un 2,5% de probabilidad en cada cola si \\(H_0\\) es verdadera.\n\n\n\n\n\n\n\n\nPotencia estadística\nLa potencia estadística es la probabilidad de rechazar la hipótesis nula (\\(H_0\\)) cuando esta es falsa, es decir, de detectar un efecto real. Se calcula como \\(1 - \\beta\\), donde \\(\\beta\\) es la probabilidad de cometer un error de tipo II. Aumenta con el tamaño muestral, disminuye con la varianza, y depende de la magnitud del efecto que se desea detectar.\nMientras que \\(\\alpha\\) se fija antes del análisis, \\(\\beta\\) varía según el valor real del parámetro. La potencia se considera adecuada cuando alcanza al menos el 80%, lo que implica un 20% de riesgo de no detectar una diferencia real.\nNo es posible reducir simultáneamente \\(\\alpha\\) y \\(\\beta\\), por lo que el diseño de una prueba debe buscar un equilibrio entre ambos errores. La potencia proporciona un control adicional en la toma de decisiones, ya que no basta con obtener un valor p pequeño: también se requiere una potencia suficiente para respaldar la conclusión.\nErrores\nEn el razonamiento de los contrastes de hipótesis existen dos posibles errores:\n\nError tipo I (\\(\\alpha\\)): ocurre cuando se rechaza la hipótesis nula siendo esta verdadera. Es decir, se concluye erróneamente que existe una diferencia cuando en realidad no la hay. Para minimizar este riesgo, se elige un \\(\\alpha\\) pequeño (por ejemplo, 0,01; 0,05 o 0,10).\nError tipo II (\\(\\beta\\)): ocurre cuando no se rechaza la hipótesis nula siendo esta falsa, es decir, se falla en detectar una diferencia real. El valor de \\(\\beta\\) depende del valor real del parámetro, y suele ser mayor que \\(\\alpha\\); sin embargo, no se conoce con certeza una vez realizada la prueba.\n\nUna vez finalizado el análisis, no es posible saber si se ha cometido alguno de estos errores, ya que el verdadero estado de la población es desconocido. Sin embargo, si se ha utilizado un \\(\\alpha\\) bajo, podemos tener mayor confianza en que, si se rechazó \\(H_0\\), el error tipo I es poco probable.\nLa siguiente tabla resume las posibles situaciones en un contraste de hipótesis:\n\n\n\n\n\nNo rechazar H0\nRechazar H0\n\n\n\nH0 es cierta\nCorrecto (1-α)\nError tipo I (α)\n\n\nH0 es falsa\nError tipo II (β)\nCorrecto (1-β)",
    "crumbs": [
      "Material suplementario",
      "Introducción a la inferencia estadística"
    ]
  },
  {
    "objectID": "extras/intro_inferencia.html#aplicaciones-e-interpretación",
    "href": "extras/intro_inferencia.html#aplicaciones-e-interpretación",
    "title": "Introducción a la inferencia estadística",
    "section": "Aplicaciones e Interpretación",
    "text": "Aplicaciones e Interpretación\nLa inferencia estadística permite responder preguntas de investigación tales como:\n\n¿Es significativa la diferencia entre dos medias?\n¿Existe una relación entre dos variables?\n¿Cómo se distribuyen los datos respecto a un parámetro de interés?\n\nAl aplicar estos métodos, es crucial tener en cuenta la calidad y representatividad de la muestra, así como la validez de las asunciones subyacentes (normalidad, homogeneidad de varianzas, etc.).\n\n\n\n\n\n\nEste apunte sintetiza los conceptos esenciales y las herramientas básicas para llevar a cabo un análisis inferencial, que sirve de base para la interpretación de modelos y resultados en análisis cuantitativos. Quienes necesiten profundizar más en los temas, les recomendamos consultar las siguientes fuentes:\n\nManual de Epidemiología: Fundamentos, Métodos y Aplicaciones (Instituto Nacional de Epidemiología 2015): Capítulo 3.\nEstadística 12A Edición (Triola 2018): Capítulos 8 y 9.\n\n\n\n\n\nRíus Díaz et al. (2012)\nDaniel (2002)\nGlantz, S (2006)\nAgresti (2015)",
    "crumbs": [
      "Material suplementario",
      "Introducción a la inferencia estadística"
    ]
  },
  {
    "objectID": "extras/intro_R.html",
    "href": "extras/intro_R.html",
    "title": "Introducción a R y RStudio",
    "section": "",
    "text": "Artwork por @allison_horst",
    "crumbs": [
      "Material suplementario",
      "Introducción a R y RStudio"
    ]
  },
  {
    "objectID": "extras/intro_R.html#qué-es-r",
    "href": "extras/intro_R.html#qué-es-r",
    "title": "Introducción a R y RStudio",
    "section": "¿Qué es R?",
    "text": "¿Qué es R?\nR (2025) es un lenguaje de programación interpretado, orientado a objetos, multiplataforma y de código abierto, diseñado específicamente para el análisis estadístico de datos. Cuenta con estructuras y sintaxis propias, y una extensa colección de funciones desarrolladas para aplicaciones estadísticas.\n\nComo lenguaje orientado a objetos, todo lo que manipulamos —variables, funciones, conjuntos de datos, resultados— se considera un objeto, lo que aporta flexibilidad y simplicidad al trabajo con información.\nAl ser un lenguaje interpretado, los scripts se ejecutan directamente sin necesidad de compilación, lo que favorece la exploración interactiva.\nR es multiplataforma: se puede instalar y ejecutar en Linux, Windows y macOS con un comportamiento consistente.\nAdemás, es software libre distribuido bajo licencia GNU-GPL, lo que permite su uso, modificación y redistribución sin restricciones.\n\nPara instalarlo en Windows, se debe descargar el instalador desde el sitio oficial del proyecto R (CRAN) y seguir los pasos guiados. Una vez finalizada la instalación, R estará listo para usarse desde cualquier entorno compatible. Sin embargo, si no se cuenta con experiencia previa en programación, no se recomienda utilizar R directamente desde su consola nativa.",
    "crumbs": [
      "Material suplementario",
      "Introducción a R y RStudio"
    ]
  },
  {
    "objectID": "extras/intro_R.html#qué-es-rstudio",
    "href": "extras/intro_R.html#qué-es-rstudio",
    "title": "Introducción a R y RStudio",
    "section": "¿Qué es RStudio?",
    "text": "¿Qué es RStudio?\nRStudio Desktop (2025, Posit Software) es un entorno de desarrollo integrado (IDE) diseñado específicamente para facilitar el trabajo con R. Proporciona una interfaz unificada que incluye editor de scripts, consola de R, entorno, explorador de archivos, panel de gráficos y ayuda, entre otros, optimizando el flujo de trabajo.\n\n\n\n\nEntre sus principales ventajas se encuentran:\n\n\nAsistente de código: al escribir en el editor o la consola, la tecla Tab activa el autocompletado de funciones, nombres de objetos y argumentos, agilizando la escritura y reduciendo errores de sintaxis. En versiones recientes, el asistente también permite la previsualización de colores en los gráficos, resaltar los paréntesis de cierre en funciones anidadas con distintos colores y gestionar automáticamente la indentación del código.\n\n\n\nAyuda en línea: al posicionar el cursor sobre el nombre de una función en el editor y presionar F1, se accede directamente a la documentación correspondiente en el panel Help (habitualmente ubicado en la esquina inferior derecha).\n\n\n\nHistorial de comandos: en la consola, al usar las teclas de flecha arriba/abajo, se puede navegar por los comandos ejecutados durante la sesión actual. Además, el panel History (parte superior derecha) almacena los comandos de todas las sesiones previas, permitiendo reutilizarlos con un clic en To Console (Enter) o To Source (Shift + Enter), según se desee insertarlos en la consola o en el script activo.\n\n\n\nRStudio es multiplataforma, de código abierto, y permite una integración fluida con herramientas del ecosistema R, como R Markdown, Quarto, control de versiones y manejo de proyectos.\n\n\n\n\n\n\nUna vez instalados R y RStudio, ya contamos con todo lo necesario para comenzar a trabajar. Aunque instalamos ambos programas, en la práctica sólo necesitamos abrir RStudio, que utiliza a R como motor de ejecución.\n\n\n\nProyectos en RStudio\nLos proyectos de RStudio permiten organizar de forma estructurada todo el material asociado a un análisis: scripts, informes, bases de datos, imágenes, etc. Cada proyecto se vincula a una carpeta específica del sistema de archivos, y RStudio la utiliza como directorio de trabajo por defecto. Esto facilita la importación de datos y evita errores relacionados con rutas relativas o absolutas.\nPara crear un nuevo proyecto, se puede utilizar el menú File &gt; New Project… o el acceso directo New Project… ubicado en la esquina superior derecha de la interfaz. En ambos casos, se abre un asistente con tres opciones:\n\n\n\n\n\nNew Directory: crea una nueva carpeta para el proyecto. Es la opción más habitual.\nExisting Directory: vincula el proyecto a una carpeta ya existente que contenga archivos previos.\nVersion Control: permite clonar un repositorio (Git o SVN). Esta opción no se utilizará en este curso.\n\nTrabajar con proyectos garantiza que, al importar archivos, RStudio los busque automáticamente dentro de la carpeta correspondiente. Además, cada proyecto mantiene su propio entorno de trabajo, lo que significa que al cerrar o cambiar de proyecto, se conserva la configuración previa sin interferencias.\nCuando un proyecto ya existe, dentro de la carpeta encontraremos un archivo con extensión .Rproj que al ejecutarlo abre una nueva sesión de RStudio con el proyecto activo. Otras opciones son abrir desde File &gt; Open Project… o desde el ícono  en la esquina superior derecha de RStudio. Esta última opción también mantiene un historial de los proyectos abiertos recientemente, lo que permite acceder rápidamente a ellos mediante accesos directos.\nScripts en RStudio\nUn script es un archivo de texto plano que contiene instrucciones escritas en R. Permite guardar, reutilizar y compartir el código, favoreciendo la reproducibilidad del análisis.\n\nCrear un nuevo script: podemos crear un script desde el menú File &gt; New File &gt; R Script (acceso rápido: Ctrl + Shift + N) o haciendo clic en el ícono de la hoja (📄) con símbolo “+” en la barra de herramientas.\nEjecutar código: la forma habitual de ejecutar un script es línea por línea, con Ctrl + Enter o el botón Run (). El cursor debe estar en cualquier punto de la línea a ejecutar. Tras la ejecución, el cursor avanza automáticamente a la siguiente línea de código.\nEditar un script: las líneas del script pueden editarse directamente. Cada vez que se realiza una modificación, es necesario volver a ejecutar esas líneas para actualizar los resultados.\nGuardar un script: Para guardar los cambios, se puede usar el ícono del diskette (💾), el menú File &gt; Save, o el atajo Ctrl + S. Para guardar con otro nombre o ubicación, utilizar File &gt; Save As…\nAbrir un script existente: Los archivos de script tienen extensión .R. Pueden abrirse desde el panel File &gt; Open File…, el panel Files o usando el atajo de teclado Ctrl + O. Al abrirse, se muestran en una nueva pestaña del editor.",
    "crumbs": [
      "Material suplementario",
      "Introducción a R y RStudio"
    ]
  },
  {
    "objectID": "extras/intro_R.html#funciones",
    "href": "extras/intro_R.html#funciones",
    "title": "Introducción a R y RStudio",
    "section": "Funciones",
    "text": "Funciones\nEn R, los comandos básicos se denominan funciones. Muchas de ellas están incluidas en el núcleo del lenguaje (conocido como R base) y se denominan integradas, mientras que otras forman parte de paquetes adicionales.\nCada función tiene un nombre y suele requerir uno o más argumentos (también llamados parámetros), que se escriben entre paréntesis y separados por comas. Incluso las funciones que no requieren argumentos deben escribirse con paréntesis vacíos.\n\n# Sintaxis general\nnombre_de_la_función(arg1, arg2, ...)\n\nLas funciones siempre ejecutan una acción o devuelven un valor, que puede ser visualizado, almacenado o utilizado en otras operaciones.\nReglas de sintaxis\nDado que R es un lenguaje interpretado, la sintaxis debe ser estrictamente correcta. Algunos puntos clave:\n\n\nLos argumentos pueden escribirse con el nombre del parámetro seguido de un signo igual:\n\nfuncion(arg1 = 32, arg2 = 5, arg3 = 65)\n\n\n\nTambién se pueden omitir los nombres y escribir directamente los valores. En ese caso, el orden importa y debe coincidir con el definido en la documentación de la función:\n\nfuncion(32, 5, 65)\n\n\nTipos de argumentos\nLos argumentos pueden ser:\n\nValores numéricos: 3, 10.5\nLógicos: TRUE, FALSE\nEspeciales: NA (faltante), NULL, Inf\nTexto: debe escribirse entre comillas, por ejemplo \"menos\"\n\nObjetos: como variables previamente creadas (x, datos, etc.)\n\nfuncion(arg1 = 3, arg2 = NA, arg3 = TRUE, arg4 = \"menos\", arg5 = x)",
    "crumbs": [
      "Material suplementario",
      "Introducción a R y RStudio"
    ]
  },
  {
    "objectID": "extras/intro_R.html#paquetes",
    "href": "extras/intro_R.html#paquetes",
    "title": "Introducción a R y RStudio",
    "section": "Paquetes",
    "text": "Paquetes\nR se compone de un sistema base y de paquetes (librerías) que amplían sus funcionalidades. Un paquete es una colección de funciones, datos y documentación que extiende las capacidades del lenguaje para tareas específicas.\nExisten distintos tipos de paquetes:\n\nBase: se instalan y activan junto con R.\nRecomendados: también se instalan por defecto, pero requieren ser cargados manualmente.\nAdicionales: más de 17.000 disponibles en el repositorio oficial CRAN, listos para ser instalados según necesidad. Además, algunos paquetes pueden descargarse desde otros repositorios como GitHub y Bioconductor.\n\nAl ser open source, cualquier persona puede desarrollar y publicar nuevos paquetes. Esto convierte a R en una herramienta en constante evolución.\nInstalación\nLos paquetes pueden instalarse desde R o RStudio o (si no hay acceso a internet o trabajamos con conexiones de uso medido) desde archivos locales .zip o .tar.gz, descargados previamente desde CRAN u otros repositorios.\nEn RStudio, los paquetes se gestionan desde la pestaña Packages (bloque inferior derecho). Para instalar uno nuevo:\n\nHacer clic en , se abrirá una ventana emergente:\n\n\n\n\n\n\nEspecificar el nombre del paquete a instalar.\nMarcar la opción Install dependencies para incluir automáticamente sus dependencias.\nAl presionar el botón Install, R internamente traduce esta acción a la función install.packages().\n\nLos paquetes deben instalarse una única vez por computadora cuando se los va a utilizar por primera vez. A partir de entonces, sólo es necesario cargarlos al inicio de cada sesión mediante la función library():\n\nlibrary(nombre_del_paquete)\n\nDependencias\nMuchos paquetes requieren funciones de otros paquetes para funcionar. Estos paquetes (dependencias) deben estar instaladas previamente, de lo contrario la ejecución de una función puede fallar por no encontrar otra interna. Por eso, es recomendable dejar seleccionada la opción Install dependencies al instalar.\nPaquetes a instalar\nPara trabajar durante el curso, deberemos instalar los siguientes paquetes y sus dependencias:\n\n# Manejo de datos\ninstall.packages(\"tidyverse\", dependencies = T)\n\ninstall.packages(\"janitor\", dependencies = T)\n\n# Modelos de meta-análisis\ninstall.packages(\"metafor\", dependencies = T)\n\ninstall.packages(\"meta\", dependencies = T)\n\n# Paletas aptas para daltonismo\ninstall.packages(\"scico\", dependencies = T)\n\n# Visualización avanzada\nremotes::install_github(\"daniel1noble/orchaRd\")",
    "crumbs": [
      "Material suplementario",
      "Introducción a R y RStudio"
    ]
  },
  {
    "objectID": "extras/intro_R.html#objetos",
    "href": "extras/intro_R.html#objetos",
    "title": "Introducción a R y RStudio",
    "section": "Objetos",
    "text": "Objetos\nEn R, los datos, resultados, funciones y estructuras se almacenan en objetos, que constituyen la unidad fundamental de trabajo en el lenguaje.\nPara crear un objeto, se utiliza el operador de asignación &lt;- (también se acepta = aunque no se recomienda) para asignar un valor a un nombre:\n\nx &lt;- 10 \n\nEn este ejemplo, el número 10 se asigna al objeto llamado x. A partir de ese momento, podemos utilizar x en otras operaciones:\n\nx + 5  # devuelve 15\n\nLos nombres de objetos:\n\nDeben comenzar con una letra y pueden incluir letras, números, puntos (.) y guiones bajos (_).\nNo deben coincidir con palabras reservadas a funciones del lenguaje.\nSon sensibles a mayúsculas/minúsculas: Edad y edad son objetos distintos.\n\nLos objetos contenedores de datos más simples pertenecen a cinco clases que se denominan atómicas y que son los siguientes tipos de datos:\n\ninteger: números enteros.\nnumeric: números reales (también llamados “doble precisión”).\ncomplex: números complejos.\ncharacter: cadenas de texto o caracteres.\n\nlogical: valores lógicos (TRUE o FALSE).\n\nnúmero &lt;- 25           # entero\ndecimal &lt;- 3.14        # numérico\ntexto &lt;- \"Hola\"        # carácter\nlogico &lt;- TRUE         # lógico (booleano)\n\n\n\nAdemás de los tipos atómicos, los datos pueden organizarse en estructuras contenedoras que permiten agrupar múltiples valores:\n\nVector: conjunto de elementos del mismo tipo, ordenados linealmente. Se construye con la función c().\nLista: colección ordenada de objetos de distinto tipo o longitud, creada con list().\n\nDataframe: estructura bidimensional donde cada columna es un vector del mismo largo (generalmente del mismo tipo). Se construye con data.frame() o, en el tidyverse, con tibble().\n\n# Vector\nvector  &lt;- c(1, 2, 3, 4)\n\n# Lista\nlista &lt;- list(vector, \"elemento_2\") # lista\n\n# Dataframe (R base)\ndataframe &lt;- data.frame(\n  var1 = vector,\n  var2 = vector + 5,\n  var3 = vector * vector^2\n)\n\n# Dataframe (tidyverse)\ntibble &lt;- tibble(\n  var1 = vector,\n  var2 = vector + 5,\n  var3 = vector * vector^2\n)",
    "crumbs": [
      "Material suplementario",
      "Introducción a R y RStudio"
    ]
  },
  {
    "objectID": "extras/intro_R.html#archivos-de-datos",
    "href": "extras/intro_R.html#archivos-de-datos",
    "title": "Introducción a R y RStudio",
    "section": "Archivos de datos",
    "text": "Archivos de datos\nR permite importar tablas de datos desde diversos formatos, tanto utilizando funciones de R base como funciones provistas por paquetes específicos.\nEl formato más común es el texto plano (ASCII), donde los valores están organizados en columnas separadas por caracteres delimitadores. Los separadores más habituales incluyen:\n\nComa (,)\nPunto y coma (;)\nTabulación (\\t)\nBarra vertical (|)\n\nEstos archivos suelen tener una cabecera (header) en la primera fila con los nombres de las variables, y cada columna debe contener datos del mismo tipo (números, texto, lógicos, etc.).\nPara importar correctamente un archivo es importante conocer su estructura:\n\nSi incluye o no cabecera.\nQué carácter se usa como separador.\nEl tipo de codificación (UTF-8, Latin1, etc.).\n\nDado que son archivos de texto, pueden visualizarse con editores simples como el Bloc de Notas o desde RStudio, lo que facilita su inspección previa.\nPara cargar los datos desde un archivo de texto plano o una hoja de cálculo de Excel usamos el código:\n\ndatos &lt;- read.xxx(\"mis_datos.txt\")\n\n(Se debe reemplazar read.xxx() por la función correspondiente: read.table(), read.csv(), read_delim(), read_excel(), etc., según el caso).\nR también permite cargar bases de datos incluidas en paquetes instalados mediante:\n\ndata(nombre_datos)\n\ndatos &lt;- nombre_datos",
    "crumbs": [
      "Material suplementario",
      "Introducción a R y RStudio"
    ]
  },
  {
    "objectID": "extras/intro_R.html#buenas-prácticas",
    "href": "extras/intro_R.html#buenas-prácticas",
    "title": "Introducción a R y RStudio",
    "section": "Buenas prácticas",
    "text": "Buenas prácticas\nAdoptar buenas prácticas desde el inicio mejora la reproducibilidad, facilita el trabajo colaborativo y reduce errores. Algunas recomendaciones clave son:\n\nTrabajar siempre dentro de un proyecto de RStudio (.Rproj). Esto permite organizar los archivos, mantener rutas relativas consistentes y acceder a funcionalidades específicas como control de versiones o panel de archivos integrados.\nIncluir al comienzo de cada script las líneas de activación de paquetes necesarios, utilizando la función library().\nCargar los datos una vez activados los paquetes, para garantizar que todas las funciones requeridas estén disponibles.\nDocumentar el código mediante comentarios iniciados con #. Esto permite entender qué hace cada bloque de código, facilitando futuras modificaciones o revisiones.\nUsar espacios e indentación adecuada para mejorar la legibilidad. Esto es especialmente importante en estructuras anidadas (como condicionales, bucles o funciones).\n\nUna guía de estilo ampliamente recomendada —aunque no oficial— es la de tidyverse. Incluye ejemplos concretos de buenas y malas prácticas para nombrar variables, manejar líneas largas, usar sangrías, entre otros aspectos. Puede consultarse en: https://style.tidyverse.org/\n\n\n\n\n\n\nImportante\n\n\n\nEste apunte ofrece un resumen general para quienes deseen repasar los aspectos básicos de R y RStudio.\nSi no cuentan con experiencia previa en R y necesitan una introducción más detallada, podés consultar los siguientes recursos:\n\nCurso de Epidemiología Nivel Avanzado - Unidad 1: Introducción a R\nEpiR Handbook – secciones Aspectos básicos y Gestión de datos.\n\nAnte cualquier duda específica, recuerden que pueden comunicarse con los/as docentes del curso.",
    "crumbs": [
      "Material suplementario",
      "Introducción a R y RStudio"
    ]
  }
]